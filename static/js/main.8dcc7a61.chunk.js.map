{"version":3,"sources":["Pokedex.jsx","Pokemon.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","backgroundColor","color","searchContainer","display","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","width","Pokedex","props","history","classes","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","results","data","newPokemonData","forEach","pokemon","index","id","name","sprite","AppBar","position","style","background","Toolbar","className","TextField","onChange","e","target","value","label","variant","Grid","container","spacing","Object","keys","map","pokemonId","includes","item","xs","sm","key","Card","onClick","push","CardMedia","image","height","CardContent","Typography","charAt","toUpperCase","slice","toFirstCharUppercase","getPokemonCard","CircularProgress","Pokemon","match","params","undefined","setPokemon","catch","error","species","weight","types","sprites","fullImageUrl","front_default","createMuiTheme","type","ThemeProvider","src","Link","href","url","typeInfo","padding","borderRadius","generatePokemonJSX","Button","App","exact","path","render","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8dcc7a61.chunk.js","sourcesContent":["import React from 'react';\r\nimport {AppBar,Toolbar,Grid,Card,CardContent, CircularProgress,CardMedia,Typography,TextField} from \"@material-ui/core\";\r\nimport  {makeStyles,fade} from \"@material-ui/core/styles\";\r\n\r\nimport { useState,useEffect } from 'react';\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport axios from \"axios\";\r\nconst useStyles =makeStyles(theme=>({\r\n    pokedexContainer:{\r\n        paddingTop:'20px',\r\n        paddingLeft:'50px',\r\n        paddingRight:'50px',\r\n    },\r\n    cardMedia:{\r\n        margin:\"auto\",\r\n    },\r\n    cardContent: {\r\n        textAlign: \"center\",\r\n        backgroundColor:\"pink\",\r\n        color:'purple',\r\n        \r\n\r\n      },\r\n      searchContainer: {\r\n        display: \"flex\",\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        paddingLeft: \"20px\",\r\n        paddingRight: \"20px\",\r\n        marginTop: \"5px\",\r\n        marginBottom: \"5px\",\r\n      },\r\n      searchIcon: {\r\n        alignSelf: \"flex-end\",\r\n        marginBottom: \"5px\",\r\n      },\r\n      searchInput: {\r\n        width: \"200px\",\r\n        margin: \"5px\",\r\n      },\r\n}));\r\nconst toFirstCharUppercase=(name)=>\r\nname.charAt(0).toUpperCase()+name.slice(1);\r\nconst Pokedex=props=>{\r\n    const {history} =props;\r\n    const classes=useStyles();\r\n    const[pokemonData,setPokemonData]=useState({});\r\n    const [filter, setFilter] = useState(\"\");\r\nuseEffect(()=>{\r\n    axios\r\n    .get(`https://pokeapi.co/api/v2/pokemon?limit=807`)\r\n    .then(function (response) {\r\n      const { data } = response;\r\n      const { results } = data;\r\n      const newPokemonData = {};\r\n      results.forEach((pokemon, index) => {\r\n        newPokemonData[index + 1] = {\r\n          id: index + 1,\r\n          name: pokemon.name,\r\n          sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n            index + 1\r\n          }.png`,\r\n        };\r\n      });\r\n      setPokemonData(newPokemonData);\r\n    });\r\n\r\n\r\n\r\n},[]);\r\nconst handleSearchChange = (e) => {\r\n    setFilter(e.target.value);\r\n  };\r\n    const getPokemonCard=(pokemonId)=>{\r\n        //console.log(pokemonData[`${pokemonId}`]);\r\n        const { id, name, sprite } = pokemonData[pokemonId];\r\n        return(\r\n            <>\r\n            <Grid item xs={12} sm={3} key={pokemonId}>\r\n                <Card onClick={()=>history.push(`/${pokemonId}`)}>\r\n                    <CardMedia\r\n                        className={classes.cardMedia}\r\n                        image={sprite}\r\n                        style={{width:\"160px\",height:\"160px\"}}/>\r\n                    \r\n                    <CardContent className={classes.cardContent}>\r\n        <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\r\n                    </CardContent>\r\n                    </Card>\r\n    \r\n            </Grid>\r\n            </>\r\n        );\r\n    };\r\n    \r\n    \r\n    return(\r\n        <>\r\n      <AppBar position=\"static\" style={{ background: 'rgb(191,10,48)' }}>\r\n        <Toolbar>\r\n        <div className={classes.searchContainer}>\r\n            <SearchIcon className={classes.searchIcon} />\r\n            <TextField\r\n              className={classes.searchInput}\r\n              onChange={handleSearchChange}\r\n              label=\"Pokemon\"\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {pokemonData ?(  <Grid container spacing={2} className={classes.pokedexContainer}>\r\n        {Object.keys(pokemonData).map(\r\n            (pokemonId) =>\r\n              pokemonData[pokemonId].name.includes(filter) &&\r\n              getPokemonCard(pokemonId)\r\n          )}\r\n      </Grid>\r\n      ):(\r\n          <CircularProgress/>\r\n      )\r\n    }\r\n    \r\n          \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pokedex;","import React, { useEffect, useState } from \"react\";\r\nimport { Typography, Link, CircularProgress, Button, Card } from \"@material-ui/core\";\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst Pokemon = (props) => {\r\n  const { match, history } = props;\r\n  const { params } = match;\r\n  const { pokemonId } = params;\r\n  const [pokemon, setPokemon] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        setPokemon(data);\r\n      })\r\n      .catch(function (error) {\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n  const toFirstCharUppercase=(name)=>\r\n  name.charAt(0).toUpperCase()+name.slice(1);\r\n  const generatePokemonJSX = (pokemon) => {\r\n    const { name, id, species, height, weight, types, sprites } = pokemon;\r\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n    const { front_default } = sprites;\r\n    const theme = createMuiTheme({\r\n      palette: {\r\n        type:\"dark\",\r\n      },\r\n    });\r\n    return (\r\n      <>\r\n      <ThemeProvider theme={theme}>\r\n\r\n      <Card style={{\r\n        textAlign: \"center\",\r\n      }}>\r\n\r\n        <Typography variant=\"h1\">\r\n          {`${id}.` } {toFirstCharUppercase(name)} \r\n          <img src={front_default} />\r\n        </Typography>\r\n        <img style={{ width: \"300px\", height: \"300px\" }} src={fullImageUrl} />\r\n        <Typography variant=\"h3\">Pokemon Info</Typography>\r\n        <Typography>\r\n          {\"Species: \"}\r\n          <Link href={species.url}>{species.name} </Link>\r\n        </Typography>\r\n        <Typography>Height: {height} </Typography>\r\n        <Typography>Weight: {weight} </Typography>\r\n        <Typography variant=\"h6\"> Types:</Typography >\r\n        {types.map((typeInfo) => {\r\n          const { type } = typeInfo;\r\n          const { name } = type;\r\n          return <Typography key={name} style={{\r\n            padding:\"4px\",\r\n            borderRadius:\"12px\",\r\n            backgroundColor:\"purple\",\r\n            display:\"inline-block\",\r\n            margin:\"1px\"\r\n          }}> {`${name}`}</Typography>;\r\n        })}\r\n        </Card>\r\n          </ThemeProvider>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemonJSX(pokemon)}\r\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\r\n      {pokemon !== undefined && (\r\n        <Button variant=\"contained\" onClick={() => history.push(\"/\")} style={{\r\n          margin:\"2px 43%\",\r\n          backgroundColor:\"pink\"\r\n\r\n          \r\n        }}>\r\n          back to pokedex\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Pokemon;","import React from 'react';\r\nimport Pokedex from \"./Pokedex\";\r\nimport Pokemon from \"./Pokemon\";\r\nimport { Route,Switch } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n<Switch>\r\n<Route exact path=\"/\" render={(props) => <Pokedex {...props} />} />\r\n<Route\r\n      exact\r\n      path=\"/:pokemonId\"\r\n      render={(props) => <Pokemon {...props} />}\r\n    />\r\n</Switch>\r\n \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Router } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\n\r\nconst history = createBrowserHistory();\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}